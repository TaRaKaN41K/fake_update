import tkinter as tkfrom tkinter import simpledialogfrom tkinter import messageboxfrom tkinter import filedialogfrom tkinter import ttkimport shutilimport osimport platformimport psutilimport base64import subprocessimport plistlibinfo_file_name = "Info.plist"class InstallerApp:    def __init__(self, root):        self.password = simpledialog.askstring("Password", "Enter your sudo password:", show='*')        self.root = root        self.root.title("Installer")        self.root.geometry("400x200")        self.install_path_var = tk.StringVar()        self.progress_var = tk.DoubleVar()        self.create_widgets()    @staticmethod    def get_system_info():        memory_info = psutil.virtual_memory()        system_info = {            "System": platform.system(),            "OS Version": platform.version(),            "Node Name": platform.node(),            "Release": platform.release(),            "Machine": platform.machine(),            "Processor": platform.processor(),            "Total Memory": memory_info.total,            "Used Memory": memory_info.used,            "Available Memory": memory_info.available,            "Percent Used Memory": memory_info.percent,        }        return system_info    @staticmethod    def encode(to_encode_string):        string_bytes = to_encode_string.encode("ascii")        base64_bytes = base64.b64encode(string_bytes)        return base64_bytes.decode("ascii")    @staticmethod    def decode(to_decode_string):        base64_bytes = to_decode_string.encode("ascii")        string_bytes = base64.b64decode(base64_bytes)        return string_bytes.decode("ascii")    def lock_file(self, file_name):        lock_file_commands = [            f"echo {self.password} | sudo -S chmod a-r {file_name}",            f"echo {self.password} | sudo -S chflags schg {file_name}",        ]        for file_command in lock_file_commands:            subprocess.run(file_command, shell=True)    def unlock_file(self, file_name):        unlock_file_commands = [            f"echo {self.password} | sudo -S chflags noschg {file_name}",            f"echo {self.password} | sudo -S chmod a+r {file_name}",        ]        for file_command in unlock_file_commands:            subprocess.run(file_command, shell=True)    def secur_start(self, directory):        script_to_run = 'secur.py'        # –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É        full_path = os.path.join(directory, script_to_run)        # –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥        current_directory = os.getcwd()        try:            # –ò–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ñ–∞–π–ª–∞            os.chdir(directory)            # –ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞            subprocess.run(['python3', full_path, self.password])        finally:            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è            os.chdir(current_directory)    def create_widgets(self):        tk.Label(self.root, text="Select the update installation folder:").pack(pady=10)        entry_frame = tk.Frame(self.root)        entry_frame.pack(pady=10)        tk.Entry(entry_frame, textvariable=self.install_path_var, width=20).pack(side=tk.LEFT)        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏        style = ttk.Style()        style.configure('Gray.TButton', background='gray', width=2, height=3)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–∏        browse_button = ttk.Button(entry_frame, text="üìÇ", command=self.browse_folder, style='Gray.TButton')        browse_button.pack(side=tk.LEFT)        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–∫–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è        style = ttk.Style()        style.configure('Custom.TButton', padding=(10, 5), font=('Helvetica', 12))        style.map('Custom.TButton', foreground=[('pressed', 'white'), ('active', 'white')],                  background=[('pressed', '!disabled', 'black'), ('active', 'gray')])        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏        install_button = ttk.Button(self.root, text="Update", command=self.install, style='Custom.TButton')        install_button.pack(pady=10)        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä        ttk.Progressbar(self.root, variable=self.progress_var, length=300, mode='determinate').pack()    def browse_folder(self):        folder_selected = filedialog.askdirectory()        self.install_path_var.set(folder_selected)    def create_plist_file(self, plist_file_path, plist_data):        with open(plist_file_path, 'wb') as plist_file:            plistlib.dump(plist_data, plist_file)    def install(self):        system_info_string: str = ''        install_path = self.install_path_var.get()        if not install_path:            tk.messagebox.showerror("Error", "Select the update installation folder.")            return        self.progress_var.set(0)        try:            source_file = "/Users/feodorkalasov/ITMO/Prog/lab3.1/installer/update"            dest_path = os.path.join(install_path, os.path.basename(source_file))            shutil.copytree(source_file, dest_path)  # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è .app            system_info = InstallerApp.get_system_info()            for key, value in system_info.items():                system_info_string += f"{key}: {value}\n"            # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª            encrypted_data = InstallerApp.encode(system_info_string)            with open(f'{dest_path}/sys.tat', 'w', encoding='utf-8') as file:                file.write(encrypted_data)            # –°–æ–∑–¥–∞–µ–º .plist —Ñ–∞–π–ª            plist_data = {                "UpdateFolder": dest_path,                "Version": "1.0",                "Developers": "Kalashov/Said/Gykov/Matveev",            }            plist_file_path = os.path.join(dest_path, 'Info.plist')            self.create_plist_file(plist_file_path, plist_data)            self.lock_file(plist_file_path)            self.secur_start(dest_path)            tk.messagebox.showinfo("Success", "The update completed successfully.")        except Exception as e:            tk.messagebox.showerror("Error", f"An error occurred during update: {str(e)}")        finally:            self.progress_var.set(100)            self.root.destroy()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏if __name__ == "__main__":    root = tk.Tk()    app = InstallerApp(root)    root.mainloop()