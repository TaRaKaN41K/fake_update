# import subprocess# import sys# from tkinter import filedialog# import os# import plistlib# import base64### class Secur:#     def __init__(self):#         self.password = sys.argv[1]##     @staticmethod#     def get_plist_path():#         # Запрашиваем у пользователя путь до .plist файла с помощью диалога выбора файла#         file_path = filedialog.askopenfilename(title="Select the .plist file", filetypes=[("Property List", "*.plist")])##         return file_path##     @staticmethod#     def get_date_from_plist(plist_file_path, key):#         try:#             with open(plist_file_path, 'rb') as plist_file:#                 plist_data = plistlib.load(plist_file)#                 if key in plist_data:#                     return plist_data[key]#                 else:#                     print(f"Key '{key}' not found in the plist file.")#         except Exception as e:#             print(f"An error occurred while reading the plist file: {str(e)}")##     @staticmethod#     def decode(to_decode_string):#         base64_bytes = to_decode_string.encode("ascii")#         string_bytes = base64.b64decode(base64_bytes)##         return string_bytes.decode("ascii")##     def lock_file(self, file_name):#         lock_file_commands = [#             f"echo {self.password} | sudo -S chmod a-r {file_name}",#             f"echo {self.password} | sudo -S chflags schg {file_name}",#         ]##         for file_command in lock_file_commands:#             subprocess.run(file_command, shell=True)##     def unlock_file(self, file_name):#         unlock_file_commands = [#             f"echo {self.password} | sudo -S chflags noschg {file_name}",#             f"echo {self.password} | sudo -S chmod a+r {file_name}",#         ]##         for file_command in unlock_file_commands:#             subprocess.run(file_command, shell=True)##     def check_electronic_signature(self):#         info_file_name = Secur.get_plist_path()#         self.unlock_file(info_file_name)##         date_value = Secur.get_date_from_plist(info_file_name, 'Developers')##         self.lock_file(info_file_name)##         if date_value == "Kalashov/Said/Gykov/Matveev":#             print("Successful verification")##             self.unlock_file('sys.tat')##             try:#                 with open(f"{os.getcwd()}/sys.tat", 'rb') as file:#                     content = file.read()#                     decoded_content = Secur.decode(content)##                 with open(f"{os.getcwd()}/sys.tat", 'w', encoding='utf-8') as file:#                     file.write(decoded_content)##             except Exception as e:#                 print(f"An error occurred while decoding and writing the file: {str(e)}")###         else:#             print("Verification failed")### if __name__ == "__main__":##     secur = Secur()#     secur.lock_file('sys.tat')#     secur.check_electronic_signature()import subprocessfrom tkinter import filedialogimport osimport plistlibimport base64import sysclass DecodingError(Exception):    passclass VerificationError(Exception):    passclass Secur:    def __init__(self):        self.password = sys.argv[1]    @staticmethod    def get_plist_path():        file_path = filedialog.askopenfilename(title="Select the .plist file", filetypes=[("Property List", "*.plist")])        return file_path    @staticmethod    def get_date_from_plist(plist_file_path, key):        try:            with open(plist_file_path, 'rb') as plist_file:                plist_data = plistlib.load(plist_file)                return plist_data.get(key)        except Exception as e:            print(f"An error occurred while reading the plist file: {str(e)}")    @staticmethod    def decode(to_decode_string):        try:            base64_bytes = to_decode_string.encode("ascii")            string_bytes = base64.b64decode(base64_bytes)            return string_bytes.decode("utf-8")        except Exception as e:            raise DecodingError(f"An error occurred while decoding: {str(e)}")    def lock_file(self, file_name):        lock_file_commands = [            f"echo {self.password} | sudo -S chmod a-r {file_name}",            f"echo {self.password} | sudo -S chflags schg {file_name}",        ]        for file_command in lock_file_commands:            try:                subprocess.run(file_command, check=True, shell=True)            except subprocess.CalledProcessError as e:                raise VerificationError(f"Error locking file: {str(e)}")    def unlock_file(self, file_name):        unlock_file_commands = [            f"echo {self.password} | sudo -S chflags noschg {file_name}",            f"echo {self.password} | sudo -S chmod a+r {file_name}",        ]        for file_command in unlock_file_commands:            try:                subprocess.run(file_command, check=True, shell=True)            except subprocess.CalledProcessError as e:                raise VerificationError(f"Error unlocking file: {str(e)}")    def check_electronic_signature(self):        info_file_name = Secur.get_plist_path()        self.unlock_file(info_file_name)        try:            date_value = Secur.get_date_from_plist(info_file_name, 'Developers')            if date_value == "Kalashov/Said/Gykov/Matveev":                print("Successful verification")                self.unlock_file('sys.tat')                try:                    with open(f"{os.getcwd()}/sys.tat", 'rb') as file:                        content = file.read()                        decoded_content = Secur.decode(content.decode('utf-8'))                    with open(f"{os.getcwd()}/sys.tat", 'w', encoding='utf-8') as file:                        file.write(decoded_content)                except DecodingError as de:                    print(f"Decoding error: {str(de)}")            else:                print("Verification failed")        except VerificationError as ve:            print(f"Verification error: {str(ve)}")        finally:            self.lock_file(info_file_name)if __name__ == "__main__":    secur = Secur()    secur.lock_file('sys.tat')    secur.check_electronic_signature()